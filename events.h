#pragma once

#include <SDL.h>
#include <cassert>

namespace dagger
{
	enum class EventType
	{
		QUIT = SDL_QUIT,

		KEY_DOWN = SDL_KEYDOWN,
		KEY_UP = SDL_KEYUP,

		MOUSE_DOWN = SDL_MOUSEBUTTONDOWN,
		MOUSE_UP = SDL_MOUSEBUTTONUP,
		MOUSE_WHEEL = SDL_MOUSEWHEEL,
		MOUSE_MOTION = SDL_MOUSEMOTION,

		GAMEPAD_DOWN = SDL_CONTROLLERBUTTONDOWN,
		GAMEPAD_UP = SDL_CONTROLLERBUTTONUP,
		GAMEPAD_ADD = SDL_CONTROLLERDEVICEADDED,
		GAMEPAD_MOVED = SDL_CONTROLLERDEVICEREMOVED,
		GAMEPAD_REMAPPED = SDL_CONTROLLERDEVICEREMAPPED,
		GAMEPAD_AXIS = SDL_CONTROLLERAXISMOTION,
	};

	enum class Keyboard
	{
		UNKNOWN = SDLK_UNKNOWN,
		BACKSPACE = SDLK_BACKSPACE,
		TAB = SDLK_TAB,
		RETURN = SDLK_RETURN,
		ESCAPE = SDLK_ESCAPE,
		SPACE = SDLK_SPACE,
		EXCLAIM = SDLK_EXCLAIM,
		QUOTEDBL = SDLK_QUOTEDBL,
		HASH = SDLK_HASH,
		DOLLAR = SDLK_DOLLAR,
		PERCENT = SDLK_PERCENT,
		AMPERSAND = SDLK_AMPERSAND,
		QUOTE = SDLK_QUOTE,
		LEFTPAREN = SDLK_LEFTPAREN,
		RIGHTPAREN = SDLK_RIGHTPAREN,
		ASTERISK = SDLK_ASTERISK,
		PLUS = SDLK_PLUS,
		COMMA = SDLK_COMMA,
		MINUS = SDLK_MINUS,
		PERIOD = SDLK_PERIOD,
		SLASH = SDLK_SLASH,
		DIGIT_0 = SDLK_0,
		DIGIT_1 = SDLK_1,
		DIGIT_2 = SDLK_2,
		DIGIT_3 = SDLK_3,
		DIGIT_4 = SDLK_4,
		DIGIT_5 = SDLK_5,
		DIGIT_6 = SDLK_6,
		DIGIT_7 = SDLK_7,
		DIGIT_8 = SDLK_8,
		DIGIT_9 = SDLK_9,
		COLON = SDLK_COLON,
		SEMICOLON = SDLK_SEMICOLON,
		LESS = SDLK_LESS,
		EQUALS = SDLK_EQUALS,
		GREATER = SDLK_GREATER,
		QUESTION = SDLK_QUESTION,
		AT = SDLK_AT,
		LEFTBRACKET = SDLK_LEFTBRACKET,
		BACKSLASH = SDLK_BACKSLASH,
		RIGHTBRACKET = SDLK_RIGHTBRACKET,
		CARET = SDLK_CARET,
		UNDERSCORE = SDLK_UNDERSCORE,
		BACKQUOTE = SDLK_BACKQUOTE,
		LETTER_A = SDLK_a,
		LETTER_B = SDLK_b,
		LETTER_C = SDLK_c,
		LETTER_D = SDLK_d,
		LETTER_E = SDLK_e,
		LETTER_F = SDLK_f,
		LETTER_G = SDLK_g,
		LETTER_H = SDLK_h,
		LETTER_I = SDLK_i,
		LETTER_J = SDLK_j,
		LETTER_K = SDLK_k,
		LETTER_L = SDLK_l,
		LETTER_M = SDLK_m,
		LETTER_N = SDLK_n,
		LETTER_O = SDLK_o,
		LETTER_P = SDLK_p,
		LETTER_Q = SDLK_q,
		LETTER_R = SDLK_r,
		LETTER_S = SDLK_s,
		LETTER_T = SDLK_t,
		LETTER_U = SDLK_u,
		LETTER_V = SDLK_v,
		LETTER_W = SDLK_w,
		LETTER_X = SDLK_x,
		LETTER_Y = SDLK_y,
		LETTER_Z = SDLK_z,
		DELETE = SDLK_DELETE,
		CAPSLOCK = SDLK_CAPSLOCK,
		F1 = SDLK_F1,
		F2 = SDLK_F2,
		F3 = SDLK_F3,
		F4 = SDLK_F4,
		F5 = SDLK_F5,
		F6 = SDLK_F6,
		F7 = SDLK_F7,
		F8 = SDLK_F8,
		F9 = SDLK_F9,
		F10 = SDLK_F10,
		F11 = SDLK_F11,
		F12 = SDLK_F12,
		PRINTSCREEN = SDLK_PRINTSCREEN,
		SCROLLLOCK = SDLK_SCROLLLOCK,
		PAUSE = SDLK_PAUSE,
		INSERT = SDLK_INSERT,
		HOME = SDLK_HOME,
		PAGEUP = SDLK_PAGEUP,
		END = SDLK_END,
		PAGEDOWN = SDLK_PAGEDOWN,
		RIGHT = SDLK_RIGHT,
		LEFT = SDLK_LEFT,
		DOWN = SDLK_DOWN,
		UP = SDLK_UP,
		NUMLOCKCLEAR = SDLK_NUMLOCKCLEAR,
		KP_DIVIDE = SDLK_KP_DIVIDE,
		KP_MULTIPLY = SDLK_KP_MULTIPLY,
		KP_MINUS = SDLK_KP_MINUS,
		KP_PLUS = SDLK_KP_PLUS,
		KP_ENTER = SDLK_KP_ENTER,
		KP_1 = SDLK_KP_1,
		KP_2 = SDLK_KP_2,
		KP_3 = SDLK_KP_3,
		KP_4 = SDLK_KP_4,
		KP_5 = SDLK_KP_5,
		KP_6 = SDLK_KP_6,
		KP_7 = SDLK_KP_7,
		KP_8 = SDLK_KP_8,
		KP_9 = SDLK_KP_9,
		KP_0 = SDLK_KP_0,
		KP_PERIOD = SDLK_KP_PERIOD,
		APPLICATION = SDLK_APPLICATION,
		POWER = SDLK_POWER,
		KP_EQUALS = SDLK_KP_EQUALS,
		EXECUTE = SDLK_EXECUTE,
		HELP = SDLK_HELP,
		MENU = SDLK_MENU,
		SELECT = SDLK_SELECT,
		STOP = SDLK_STOP,
		AGAIN = SDLK_AGAIN,
		UNDO = SDLK_UNDO,
		CUT = SDLK_CUT,
		COPY = SDLK_COPY,
		PASTE = SDLK_PASTE,
		FIND = SDLK_FIND,
		MUTE = SDLK_MUTE,
		VOLUME_UP = SDLK_VOLUMEUP,
		VOLUME_DOWN = SDLK_VOLUMEDOWN,
		LEFT_CTRL = SDLK_LCTRL,
		LEFT_SHIFT = SDLK_LSHIFT,
		LEFT_ALT = SDLK_LALT,
		LGUI = SDLK_LGUI,
		RIGHT_CTRL = SDLK_RCTRL,
		RIGHT_SHIFT = SDLK_RSHIFT,
		RIGHT_ALT = SDLK_RALT,
		RIGHT_GUI = SDLK_RGUI,
		MODE = SDLK_MODE,
		AUDIO_NEXT = SDLK_AUDIONEXT,
		AUDIO_PREV = SDLK_AUDIOPREV,
		AUDIO_STOP = SDLK_AUDIOSTOP,
		AUDIO_PLAY = SDLK_AUDIOPLAY,
		AUDIO_MUTE = SDLK_AUDIOMUTE,
		MEDIA_SELECT = SDLK_MEDIASELECT
	};

	enum class Mouse
	{
		LEFT = SDL_BUTTON_LEFT,
		MIDDLE = SDL_BUTTON_MIDDLE,
		RIGHT = SDL_BUTTON_RIGHT,
		X1 = SDL_BUTTON_X1,
		X2 = SDL_BUTTON_X2,
	};

	enum class Gamepad
	{
		AXIS_LEFT_X = SDL_CONTROLLER_AXIS_LEFTX,
		AXIS_LEFT_Y = SDL_CONTROLLER_AXIS_LEFTY,
		AXIS_RIGHT_X = SDL_CONTROLLER_AXIS_RIGHTX,
		AXIS_RIGHT_Y = SDL_CONTROLLER_AXIS_RIGHTY,
		AXIS_LEFT_TRIGGER = SDL_CONTROLLER_AXIS_TRIGGERLEFT,
		AXIS_RIGHT_TRIGGER = SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
		BUTTON_A = SDL_CONTROLLER_BUTTON_A,
		BUTTON_B = SDL_CONTROLLER_BUTTON_B,
		BUTTON_X = SDL_CONTROLLER_BUTTON_X,
		BUTTON_Y = SDL_CONTROLLER_BUTTON_Y,
		BUTTON_BACK = SDL_CONTROLLER_BUTTON_BACK,
		BUTTON_GUIDE = SDL_CONTROLLER_BUTTON_GUIDE,
		BUTTON_START = SDL_CONTROLLER_BUTTON_START,
		BUTTON_LEFT_STICK = SDL_CONTROLLER_BUTTON_LEFTSTICK,
		BUTTON_RIGHT_STICK = SDL_CONTROLLER_BUTTON_RIGHTSTICK,
		BUTTON_LEFT_BUMP = SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
		BUTTON_RIGHT_BUMP = SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
		BUTTON_DPAD_UP = SDL_CONTROLLER_BUTTON_DPAD_UP,
		BUTTON_DPAD_DOWN = SDL_CONTROLLER_BUTTON_DPAD_DOWN,
		BUTTON_DPAD_LEFT = SDL_CONTROLLER_BUTTON_DPAD_LEFT,
		BUTTON_DPAD_RIGHT = SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
	};

	struct Cursor
	{
		uint32_t m_X;
		uint32_t m_Y;

		Cursor(uint32_t x_, uint32_t y_)
			: m_X{ x_ }
			, m_Y{ y_ }
		{}

		Cursor(const Cursor&) = default;
		~Cursor() = default;
	};

	struct SystemEvent
	{

	};

	struct InputEvent
	{
		InputEvent() = delete;

		InputEvent(EventType type_, Keyboard key_)
			: m_Type{ type_ }
			, m_Keyboard{ key_ }
		{}

		InputEvent(EventType type_, Mouse mouse_)
			: m_Type{ type_ }
			, m_Mouse{ mouse_ }
		{}

		InputEvent(EventType type_, Gamepad gamepad_)
			: m_Type{ type_ }
			, m_Gamepad{ gamepad_ }
		{}

		InputEvent(EventType type_, uint32_t x_, uint32_t y_)
			: m_Type{ EventType::MOUSE_MOTION }
			, m_Cursor{ Cursor(x_, y_) }
		{}

		InputEvent(const InputEvent&) = default;
		~InputEvent() = default;

		const Keyboard& GetKeyboard()
		{
			assert(m_Type == EventType::KEY_UP || m_Type == EventType::KEY_DOWN);
			return m_Keyboard;
		}

		const Mouse& GetMouse()
		{
			assert(m_Type == EventType::MOUSE_DOWN || m_Type == EventType::MOUSE_UP 
				|| m_Type == EventType::MOUSE_MOTION || m_Type == EventType::MOUSE_WHEEL);
			return m_Mouse;
		}

		const Gamepad& GetGamepad()
		{
			assert(m_Type == EventType::GAMEPAD_ADD || m_Type == EventType::GAMEPAD_AXIS
				|| m_Type == EventType::GAMEPAD_DOWN || m_Type == EventType::GAMEPAD_MOVED
				|| m_Type == EventType::GAMEPAD_REMAPPED || m_Type == EventType::GAMEPAD_UP);
			return m_Gamepad;
		}

		const EventType& GetType()
		{
			return m_Type;
		}

	private:
		EventType m_Type;
		
		union
		{
			Cursor m_Cursor;
			Keyboard m_Keyboard;
			Gamepad m_Gamepad;
			Mouse m_Mouse;
		};
	};
}